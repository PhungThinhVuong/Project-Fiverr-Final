{"version":3,"file":"static/js/231.3ecccf2b.chunk.js","mappings":"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","sources":["components/alert/alertSuccess.js","pages/Gig/createNewGig/CreateNewGig.js","redux/manageMainWork/actionCallApi.js","services/baseServices.js","services/mainWorkService.js","services/manageJobServices.js","webpack://fiverr-project/./src/pages/Gig/createNewGig/createNewGig.module.scss?bc91"],"sourcesContent":["import Swal from \"sweetalert2\";\n\nconst alertSuccess = () => {\n  Swal.fire({\n    position: \"top-end\",\n    icon: \"success\",\n    title: \"Success\",\n    showConfirmButton: false,\n    timer: 1500,\n  });\n};\n\nexport { alertSuccess };\n","import { useState, useEffect } from \"react\";\nimport { Form, Input, InputNumber, Rate, Switch, Cascader } from \"antd\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { getListTypeMainJobAction } from \"redux/manageMainWork/actionCallApi\";\nimport { manageJobServices } from \"services/manageJobServices\";\nimport styles from \"./createNewGig.module.scss\";\nimport { alertSuccess } from \"components/alert/alertSuccess\";\n\nconst CreateNewGig = () => {\n  const [widthWindow, setWidthWindow] = useState(window.screen.width);\n  const [resultSwitch, setResultSwitch] = useState({\n    proServices: false,\n    localSellers: false,\n    onlineSellers: false,\n  });\n  const dispatch = useDispatch();\n  const { listMainWork } = useSelector((state) => state.mainWorkReducer);\n  useEffect(() => {\n    const handleResizeWindow = () => {\n      setWidthWindow(window.screen.width);\n    };\n    window.addEventListener(\"resize\", handleResizeWindow);\n\n    return () => {\n      window.removeEventListener(\"resize\", handleResizeWindow);\n    };\n  }, [window.screen.width]);\n  useEffect(() => {\n    dispatch(getListTypeMainJobAction());\n  }, []);\n\n  let option = listMainWork.map((mainWork) => {\n    return {\n      label: mainWork.name,\n      value: mainWork._id,\n      children: mainWork.subTypeJobs.map((typeJob) => ({\n        label: typeJob.name,\n        value: typeJob._id,\n      })),\n    };\n  });\n  const onFinish = (values) => {\n    values.deliveryTime = true;\n    values.type = values.typeAndSubType[0];\n    values.subType = values.typeAndSubType[1];\n    delete values.typeAndSubType;\n    if (widthWindow < 500) {\n      values = { ...values, ...resultSwitch };\n    }\n    manageJobServices\n      .createYourJobService(values)\n      .then((reslult) => {\n        alertSuccess();\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  const handleChangeSwitch = (checked, label) => {\n    setResultSwitch({ ...resultSwitch, [label]: checked });\n  };\n\n  return (\n    <div className={styles.CreateNewGig}>\n      <div className=\"container\">\n        <h1 className=\"text-center mb-4\">Create a new gig!</h1>\n        <Form\n          name=\"createNewGig\"\n          labelCol={{ span: 4 }}\n          wrapperCol={{ span: 14 }}\n          layout=\"horizontal\"\n          initialValues={{\n            rating: 1,\n            proServices: false,\n            localSellers: false,\n            onlineSellers: false,\n          }}\n          size=\"large\"\n          onFinish={onFinish}\n        >\n          <Form.Item\n            label=\"Title\"\n            name=\"name\"\n            rules={[{ required: true, message: \"Name is required!\" }]}\n          >\n            <Input />\n          </Form.Item>\n\n          <Form.Item\n            label=\"Rating\"\n            name=\"rating\"\n            rules={[{ required: true, message: \"Rating is required!\" }]}\n          >\n            <Rate count={10} />\n          </Form.Item>\n\n          <Form.Item\n            label=\"Price\"\n            name=\"price\"\n            rules={[{ required: true, message: \"Price must be a number!\" }]}\n          >\n            <InputNumber min={1} />\n          </Form.Item>\n\n          <Form.Item\n            label=\"Type\"\n            name=\"typeAndSubType\"\n            rules={[{ required: true, message: \"Type is required!\" }]}\n          >\n            <Cascader options={option} />\n          </Form.Item>\n          {widthWindow < 500 ? (\n            <>\n              <div className=\"mb-4\">\n                <label style={{ width: \"90px\" }} className=\"mr-3\">\n                  Pro service:{\" \"}\n                </label>\n                <Switch onChange={(value) => handleChangeSwitch(value, \"proServices\")} />\n              </div>\n              <div className=\"mb-4\">\n                <label style={{ width: \"90px\" }} className=\"mr-3\">\n                  Local Seller:{\" \"}\n                </label>\n                <Switch onChange={(value) => handleChangeSwitch(value, \"localSellers\")} />\n              </div>\n              <div className=\"mb-4\">\n                <label style={{ width: \"90px\" }} className=\"mr-3\">\n                  Online Seller:{\" \"}\n                </label>\n                <Switch onChange={(value) => handleChangeSwitch(value, \"onlineSellers\")} />\n              </div>\n            </>\n          ) : (\n            <>\n              <Form.Item label=\"Pro Service\" name=\"proServices\" valuePropName=\"checked\">\n                <Switch />\n              </Form.Item>\n              <Form.Item label=\"Local Seller\" name=\"localSellers\" valuePropName=\"checked\">\n                <Switch />\n              </Form.Item>\n              <Form.Item label=\"Online Seller\" name=\"onlineSellers\" valuePropName=\"checked\">\n                <Switch />\n              </Form.Item>\n            </>\n          )}\n\n          <div>\n            <div>\n              <button\n                className=\"btn px-5 d-block d-lg-none mx-auto btn-outline-success\"\n                type=\"submit\"\n              >\n                Create\n              </button>\n              <button\n                className=\"btn px-5 d-none mx-auto d-lg-block btn-outline-success\"\n                type=\"submit\"\n              >\n                Create\n              </button>\n            </div>\n          </div>\n        </Form>\n      </div>\n    </div>\n  );\n};\n\nexport default CreateNewGig;\n","import { mainWorkService } from \"services/mainWorkService\";\nimport { getListMainWork, getsubTypeMainWork } from \"./mainWorkSlice\";\nimport { hideLoading, showLoading } from \"redux/loading/loadingSlice\";\n\nexport const getListTypeMainJobAction = () => {\n  return async (dispatch, getState) => {\n    dispatch(showLoading());\n    try {\n      let { status, data } = await mainWorkService.getListTypeMainJobService();\n      if (status === 200) dispatch(getListMainWork(data));\n      dispatch(hideLoading());\n    } catch (err) {\n      console.log(\"getListTypeMainJob fail\", err);\n      dispatch(hideLoading());\n    }\n  };\n};\n\nexport const getDetailTypeMainJobAction = (idMainJob) => {\n  return async (dispatch, getState) => {\n    dispatch(showLoading());\n    try {\n      let { status, data } = await mainWorkService.getDetailTypeMainJobService(idMainJob);\n      status === 200 && dispatch(getsubTypeMainWork(data));\n      dispatch(hideLoading());\n    } catch (err) {\n      dispatch(hideLoading());\n      console.log(\"getDetailTypeMainJobAction fail\", err);\n    }\n  };\n};\n","import axios from \"axios\";\nimport { DOMAIN_API, TOKEN, tokenByClass } from \"utils/setting/config\";\nconst tokenAdmin =\n  \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2MmUxZDBhYjRiNGMyNzAwMWM4MTFiMWUiLCJlbWFpbCI6ImNoaWVudWVoQGdtYWlsLmNvbSIsInJvbGUiOiJBRE1JTiIsImlhdCI6MTY1ODk3MTM5N30.7v7DGyufVThCYI6A3zdw77vel3w8ej7aC1mqNym45-I\";\n\nexport class BaseServices {\n  post = (url, model) => {\n    return axios({\n      method: \"POST\",\n      url: `${DOMAIN_API}/${url}`,\n      data: model,\n      headers: {\n        token: `${localStorage.getItem(TOKEN)}`,\n        tokenByClass,\n      },\n    });\n  };\n\n  get = (url) => {\n    return axios({\n      method: \"GET\",\n      url: `${DOMAIN_API}/${url}`,\n      headers: {\n        token: `${localStorage.getItem(TOKEN)}`,\n        tokenByClass,\n      },\n    });\n  };\n\n  delete = (url) => {\n    return axios({\n      method: \"DELETE\",\n      url: `${DOMAIN_API}/${url}`,\n      headers: {\n        token: `${localStorage.getItem(TOKEN)}`,\n        tokenByClass,\n      },\n    });\n  };\n\n  put = (url, model) => {\n    return axios({\n      method: \"PUT\",\n      url: `${DOMAIN_API}/${url}`,\n      data: model,\n      headers: {\n        token: `${localStorage.getItem(TOKEN)}`,\n        tokenByClass,\n      },\n    });\n  };\n\n  patch = (url, model) => {\n    return axios({\n      method: \"PATCH\",\n      url: `${DOMAIN_API}/${url}`,\n      data: model,\n      headers: {\n        token: `${localStorage.getItem(TOKEN)}`,\n        tokenByClass,\n      },\n    });\n  };\n}\n","const { BaseServices } = require(\"./baseServices\");\n\nclass mainWork extends BaseServices {\n  constructor() {\n    super();\n  }\n\n  createMainJobService = (mainJob) => this.post(`type-jobs`, mainJob); /* api 13 */\n\n  getListTypeMainJobService = () => this.get(\"type-jobs\"); /* api 14 */\n\n  deleteMainJobService = (idMainJob) => this.delete(`type-jobs/${idMainJob}`); /* api 15 */\n\n  updateMainJobService = (idMainJob, value = {}) =>\n    this.put(`type-jobs/${idMainJob}`, value); /* api16 */\n\n  getDetailTypeMainJobService = (idMainJob) => this.get(`type-jobs/${idMainJob}`); /* api 17 */\n}\n\nexport const mainWorkService = new mainWork();\n","import { BaseServices } from \"./baseServices\";\n\nclass manageJob extends BaseServices {\n  constructor() {\n    super();\n  }\n  createYourJobService = (model) => this.post(`jobs`, model); /* api 19 */\n\n  getListJobService = () => this.get(\"jobs\"); /* api 20 */\n\n  deleteJobService = (idJob) => this.delete(`jobs/${idJob}`); /* api 21 */\n\n  updateJobService = (idJob, model) => this.put(`jobs/${idJob}`, model); /* api 22 */\n\n  getDetailJobService = (idJob) => this.get(`jobs/${idJob}`); /* api 23 */\n\n  getListJobBaseMainJobService = (typeJobId) => {\n    return this.get(`jobs/by-type?type=${typeJobId}&skip=0&llimit=20`); /* 25 */\n  };\n  bookService = (idService) => this.patch(`jobs/booking/${idService}`); /* api 26 */\n\n  getListServiceUserBoughtService = () => this.get(`jobs/by-user`); /* api 27 */\n\n  searchJobByNameService = (valueSearch) => this.get(`jobs/by-name?name=${valueSearch}`); /* 29 */\n\n  uploadImgJobService = (idJob, formData) =>\n    this.post(`jobs/upload-image/${idJob}`, formData); /* api 30 */\n}\n\nexport const manageJobServices = new manageJob();\n","// extracted by mini-css-extract-plugin\nexport default {\"CreateNewGig\":\"createNewGig_CreateNewGig__a-tsy\"};"],"names":["alertSuccess","Swal","position","icon","title","showConfirmButton","timer","useState","window","screen","width","widthWindow","setWidthWindow","proServices","localSellers","onlineSellers","resultSwitch","setResultSwitch","dispatch","useDispatch","listMainWork","useSelector","state","mainWorkReducer","useEffect","handleResizeWindow","addEventListener","removeEventListener","getListTypeMainJobAction","option","map","mainWork","label","name","value","_id","children","subTypeJobs","typeJob","handleChangeSwitch","checked","className","styles","labelCol","span","wrapperCol","layout","initialValues","rating","size","onFinish","values","deliveryTime","type","typeAndSubType","subType","manageJobServices","then","reslult","catch","err","console","log","rules","required","message","count","min","options","style","onChange","valuePropName","getState","showLoading","mainWorkService","status","data","getListMainWork","hideLoading","getDetailTypeMainJobAction","idMainJob","getsubTypeMainWork","BaseServices","post","url","model","axios","method","DOMAIN_API","headers","token","localStorage","getItem","TOKEN","tokenByClass","get","delete","put","patch","createMainJobService","mainJob","getListTypeMainJobService","deleteMainJobService","updateMainJobService","getDetailTypeMainJobService","require","manageJob","createYourJobService","getListJobService","deleteJobService","idJob","updateJobService","getDetailJobService","getListJobBaseMainJobService","typeJobId","bookService","idService","getListServiceUserBoughtService","searchJobByNameService","valueSearch","uploadImgJobService","formData"],"sourceRoot":""}