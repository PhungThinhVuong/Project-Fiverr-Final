{"version":3,"file":"static/js/410.d5e78001.chunk.js","mappings":"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","sources":["pages/admin/manageMainJob/TableMainJob.js","redux/manageMainWork/actionCallApi.js","services/baseServices.js","services/mainWorkService.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Popconfirm, Space, Table } from \"antd\";\nimport Swal from \"sweetalert2\";\nimport { Link } from \"react-router-dom\";\n\nimport { getListTypeMainJobAction } from \"redux/manageMainWork/actionCallApi\";\nimport { mainWorkService } from \"services/mainWorkService\";\n\nlet data = [];\n\nexport default function TableMainJob() {\n  const [render, setRender] = useState(0);\n  const dispatch = useDispatch();\n  const { listMainWork } = useSelector((state) => state.mainWorkReducer);\n  useEffect(() => {\n    dispatch(getListTypeMainJobAction());\n  }, [render]);\n\n  const handleAddMainJob = () => {\n    Swal.fire({\n      title: \"Add Main Job\",\n      input: \"text\",\n      inputAttributes: {\n        autocapitalize: \"off\",\n        placeholder: \"name's job\",\n      },\n      showCancelButton: true,\n      confirmButtonText: \"Add\",\n      showLoaderOnConfirm: true,\n      inputValidator: (value) => {\n        return new Promise((resolve) => {\n          if (value.length > 0) {\n            resolve();\n          } else {\n            resolve(\"Name is required!\");\n          }\n        });\n      },\n      preConfirm: (name) => {\n        const payload = { name, status: false };\n        console.log(payload);\n        mainWorkService\n          .createMainJobService(payload)\n          .then(() => {\n            setRender((prev) => prev + 1);\n          })\n          .catch((err) => {\n            console.log(\"createMainJobService fail\", err);\n          });\n      },\n    });\n  };\n\n  const handleDeleteMainJob = (idMainJob) => {\n    mainWorkService.deleteMainJobService(idMainJob).then(() => {\n      setRender((prev) => prev + 1);\n    });\n  };\n\n  const columns = [\n    { title: \"Name\", dataIndex: \"name\", key: \"_id\" },\n    {\n      title: \"Action\",\n      key: \"action\",\n      render: (_, record) => (\n        <Space size=\"middle\">\n          <Link to={`/admin/editMainJob/${record._id}`} className=\"btn btn-outline-success\">\n            Edit\n          </Link>\n\n          <Popconfirm\n            title=\"Are you sureï¼Ÿ\"\n            okText=\"Yes\"\n            cancelText=\"No\"\n            onConfirm={() => handleDeleteMainJob(record._id)}\n          >\n            <a className=\"btn btn-outline-danger\" href=\"#\">\n              Delete\n            </a>\n          </Popconfirm>\n        </Space>\n      ),\n    },\n  ];\n  data = listMainWork;\n  return (\n    <div>\n      <button onClick={handleAddMainJob} className=\"btn btn-primary ml-5\">\n        Add Main Job\n      </button>\n      <Table columns={columns} dataSource={data} rowKey={\"_id\"} />\n    </div>\n  );\n}\n","import { mainWorkService } from \"services/mainWorkService\";\nimport { getListMainWork, getsubTypeMainWork } from \"./mainWorkSlice\";\nimport { hideLoading, showLoading } from \"redux/loading/loadingSlice\";\n\nexport const getListTypeMainJobAction = () => {\n  return async (dispatch, getState) => {\n    dispatch(showLoading());\n    try {\n      let { status, data } = await mainWorkService.getListTypeMainJobService();\n      if (status === 200) dispatch(getListMainWork(data));\n      dispatch(hideLoading());\n    } catch (err) {\n      console.log(\"getListTypeMainJob fail\", err);\n      dispatch(hideLoading());\n    }\n  };\n};\n\nexport const getDetailTypeMainJobAction = (idMainJob) => {\n  return async (dispatch, getState) => {\n    dispatch(showLoading());\n    try {\n      let { status, data } = await mainWorkService.getDetailTypeMainJobService(idMainJob);\n      status === 200 && dispatch(getsubTypeMainWork(data));\n      dispatch(hideLoading());\n    } catch (err) {\n      dispatch(hideLoading());\n      console.log(\"getDetailTypeMainJobAction fail\", err);\n    }\n  };\n};\n","import axios from \"axios\";\nimport { DOMAIN_API, TOKEN, tokenByClass } from \"utils/setting/config\";\nconst tokenAdmin =\n  \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2MmUxZDBhYjRiNGMyNzAwMWM4MTFiMWUiLCJlbWFpbCI6ImNoaWVudWVoQGdtYWlsLmNvbSIsInJvbGUiOiJBRE1JTiIsImlhdCI6MTY1ODk3MTM5N30.7v7DGyufVThCYI6A3zdw77vel3w8ej7aC1mqNym45-I\";\n\nexport class BaseServices {\n  post = (url, model) => {\n    return axios({\n      method: \"POST\",\n      url: `${DOMAIN_API}/${url}`,\n      data: model,\n      headers: {\n        token: `${localStorage.getItem(TOKEN)}`,\n        tokenByClass,\n      },\n    });\n  };\n\n  get = (url) => {\n    return axios({\n      method: \"GET\",\n      url: `${DOMAIN_API}/${url}`,\n      headers: {\n        token: `${localStorage.getItem(TOKEN)}`,\n        tokenByClass,\n      },\n    });\n  };\n\n  delete = (url) => {\n    return axios({\n      method: \"DELETE\",\n      url: `${DOMAIN_API}/${url}`,\n      headers: {\n        token: `${localStorage.getItem(TOKEN)}`,\n        tokenByClass,\n      },\n    });\n  };\n\n  put = (url, model) => {\n    return axios({\n      method: \"PUT\",\n      url: `${DOMAIN_API}/${url}`,\n      data: model,\n      headers: {\n        token: `${localStorage.getItem(TOKEN)}`,\n        tokenByClass,\n      },\n    });\n  };\n\n  patch = (url, model) => {\n    return axios({\n      method: \"PATCH\",\n      url: `${DOMAIN_API}/${url}`,\n      data: model,\n      headers: {\n        token: `${localStorage.getItem(TOKEN)}`,\n        tokenByClass,\n      },\n    });\n  };\n}\n","const { BaseServices } = require(\"./baseServices\");\n\nclass mainWork extends BaseServices {\n  constructor() {\n    super();\n  }\n\n  createMainJobService = (mainJob) => this.post(`type-jobs`, mainJob); /* api 13 */\n\n  getListTypeMainJobService = () => this.get(\"type-jobs\"); /* api 14 */\n\n  deleteMainJobService = (idMainJob) => this.delete(`type-jobs/${idMainJob}`); /* api 15 */\n\n  updateMainJobService = (idMainJob, value = {}) =>\n    this.put(`type-jobs/${idMainJob}`, value); /* api16 */\n\n  getDetailTypeMainJobService = (idMainJob) => this.get(`type-jobs/${idMainJob}`); /* api 17 */\n}\n\nexport const mainWorkService = new mainWork();\n"],"names":["data","TableMainJob","useState","render","setRender","dispatch","useDispatch","listMainWork","useSelector","state","mainWorkReducer","useEffect","getListTypeMainJobAction","columns","title","dataIndex","key","_","record","size","Link","to","_id","className","okText","cancelText","onConfirm","idMainJob","mainWorkService","then","prev","href","onClick","Swal","input","inputAttributes","autocapitalize","placeholder","showCancelButton","confirmButtonText","showLoaderOnConfirm","inputValidator","value","Promise","resolve","length","preConfirm","name","payload","status","console","log","catch","err","dataSource","rowKey","getState","showLoading","getListMainWork","hideLoading","getDetailTypeMainJobAction","getsubTypeMainWork","BaseServices","post","url","model","axios","method","DOMAIN_API","headers","token","localStorage","getItem","TOKEN","tokenByClass","get","delete","put","patch","mainWork","createMainJobService","mainJob","getListTypeMainJobService","deleteMainJobService","updateMainJobService","getDetailTypeMainJobService","require"],"sourceRoot":""}